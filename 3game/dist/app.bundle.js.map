{"version":3,"sources":["webpack:///./app/main.ts","webpack:///./app/app.component.ts","webpack:///./app/Models/TileModel.ts","webpack:///./app/Services/TilesList.ts","webpack:///./app/Services/States.ts","webpack:///./app/Components/game-start.ts","webpack:///./app/Components/desk.ts","webpack:///./app/Components/end-game.ts"],"names":[],"mappings":"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","file":"./dist/app.bundle.js","sourcesContent":["import {Component, Input, OnInit, OnChanges} from '@angular/core';\nimport { bootstrap }    from '@angular/platform-browser-dynamic';\nimport { Tile } from './app.component';\nimport TileModel from  './Models/TileModel';\nimport {TileList} from './Services/TilesList';\nimport {GameStartComponent  } from './Components/game-start';\nimport { GAME_BEGIN, GAME_END, GAME_STARTED } from './Services/States';\nimport { Desk } from './Components/desk';\nimport {GameEndComponent  } from './Components/end-game';\n\n\n@Component({\n    selector: `app`,\n    directives: [Tile, GameStartComponent, Desk,GameEndComponent],\n    styles: [`\n    .row{\n        display:flex;\n    }\n    `],\n    template: `\n    <div>\n<h1>Сделано Ищенко Никитой</h1>\n\n<end *ngIf=\"tiles.state===1\" [winner]=\"tiles.winner\"></end>\n<start *ngIf=\"tiles.state===0\"></start> \n     <desk [tiles]=\"tiles\" *ngIf=\"tiles.state===2\"></desk>\n   \n    </div>`\n})\n\nclass MainApp implements OnInit, OnChanges {\n    begin: boolean = this.tiles.state == GAME_BEGIN;\n    started: boolean = this.tiles.state === GAME_STARTED;\n    row: string = \"row\";\n\n\n    constructor(public tiles: TileList) {\n        console.log(tiles.state)\n\n    }\n\n\n    isBegin() {\n        this.tiles.state === GAME_BEGIN;\n    }\n\n\n    ngOnInit() {\n        console.log(this.tiles.state);\n    }\n\n    ngOnChanges() {\n        this.begin = this.tiles.state == GAME_BEGIN;\n        this.started = this.tiles.state === GAME_STARTED;\n        console.log(this.tiles.state)\n    }\n}\n\n\n\n\n\nbootstrap(MainApp, [TileList]);\n\n\n/** WEBPACK FOOTER **\n ** ./app/main.ts\n **/","import {Component, Input, OnInit} from '@angular/core';\nimport TileModel from  './Models/TileModel';\nimport {TileList} from './Services/TilesList'\n\n\n@Component({\n  selector: 'tile',\n\n  template: '<div (click)=\"onClick()\" [ngClass]=\"tile_model.status\"><div>'\n})\n\nexport class Tile implements OnInit {\n  @Input() tile_model: TileModel;\n\n  constructor(public tiles: TileList) {\n\n  }\n  onClick() {\n    this.tile_model.click();\n    console.log();\n    if (this.tile_model.checkIFhasChains(5)) {\n      console.log(\"winner is\" + this.tile_model.status)\n      this.tiles.endGame(this.tile_model.status);\n    }\n    if (this.tiles.checkN()) {\n       this.tiles.endGame(\"NOBODY\");\n    }\n\n  }\n  ngOnInit() {\n    console.log(this.tile_model)\n\n  }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/app.component.ts\n **/","\nexport default class TileModel {\n\n    static type: boolean = false;\n    public status: string = \"none\"\n    public top: TileModel = null\n    public bot: TileModel = null\n    public left: TileModel = null\n    public right: TileModel = null\n    constructor(param: { top?: TileModel, bot?: TileModel, left?: TileModel, right?: TileModel }) {\n        this.left = param.left;\n        this.right = param.right;\n        this.bot = param.bot;\n        this.top = param.top;\n    }\n    click() {\n        if (this.status === \"none\") {\n            this.status = TileModel.type ? \"crest\" : \"circle\";\n            TileModel.type = !TileModel.type;\n        }    \n    }\n\n    public checkIFhasChains(num: number): boolean {\n        if (this.check(\"left\") + this.check(\"right\")-1 > num) return true;\n        if (this.check(\"top\") + this.check(\"bot\")-1 > num) return true;\n        return  false;\n    }\n\n    private check(param: string): number {\n        let node: TileModel = this.getNode(param, this);\n        for (var i = 0; node && node.status == this.status; i++) {\n            i++;\n            node = this.getNode(param, node);\n        }\n        return i;\n    }\n\n\n    private getNode(param: string, model: TileModel): TileModel {\n        let node: TileModel;\n        switch (param) {\n            case \"left\":\n                return node = model.left;\n            case \"right\":\n                return node = model.right;\n\n            case \"top\":\n                return node = model.top;\n\n            case \"bot\":\n                return node = model.bot;\n\n            default:\n                return null;\n        }\n\n    }\n\n}\n\n\n/** WEBPACK FOOTER **\n ** ./app/Models/TileModel.ts\n **/","import { Injectable } from '@angular/core';\nimport TileModel from \"../Models/TileModel\"\nimport {GAME_BEGIN, GAME_END, GAME_STARTED} from './States';\n@Injectable()\nexport class TileList {\n\n    tiles: TileModel[][];\n    state: number = GAME_BEGIN;\n    winner: string;\n\n    constructor() {\n\n    }\n    endGame(winner: string) {\n        this.winner = winner;\n        this.state = GAME_END;\n    }\n\n    startGame(num: number) {\n        this.createTiles(num);\n        this.state = GAME_STARTED;\n\n    }\n\n    checkN() {\n      for (var i = 0; i < this.tiles.length; i++) {\n          for (var j = 0; j < this.tiles.length; j++) {\n              if(this.tiles[i][j].status==='none') return false;\n          }\n          \n        }\n      return true;  \n    }\n\n    private createTiles(num: number) {\n        this.tiles = new Array<TileModel[]>();\n\n        for (let i = 0; i < num; i++) {\n            this.tiles[i] = new Array<TileModel>();\n            for (let j = 0; j < num; j++)\n                this.tiles[i][j] = new TileModel({});\n        }\n\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n                this.tiles[i][j].bot = j + 1 >= num ? null : this.tiles[i][j + 1];\n                this.tiles[i][j].top = j - 1 < 0 ? null : this.tiles[i][j - 1];\n                this.tiles[i][j].left = i - 1 < 0 ? null : this.tiles[i - 1][j];\n                this.tiles[i][j].right = i + 1 >= num ? null : this.tiles[i + 1][j];\n            }\n        }\n\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./app/Services/TilesList.ts\n **/","export const GAME_BEGIN = 0;\nexport const GAME_END = 1;\nexport const GAME_STARTED = 2;\n\n\n/** WEBPACK FOOTER **\n ** ./app/Services/States.ts\n **/","import { Component, OnInit,Output,EventEmitter } from '@angular/core';\nimport {TileList } from '../Services/TilesList'\n@Component({\n    selector: 'start',\n    template: `<div>\n     <h1>Start game </h1>\n<h3>enter number of rows and cols</h3>\n    <form (submit)=\"onSubmit()\">\n        <input type=\"number\" [(ngModel)]=\"row_number\"/>\n    </form>\n</div>\n   `\n})\nexport class GameStartComponent implements OnInit {\n    \n    row_number: number;\n    constructor(\n        public tiles: TileList\n    ) { }\n\n    ngOnInit() { }\n    onSubmit() {\n        this.tiles.startGame(this.row_number);\n\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./app/Components/game-start.ts\n **/","import {Component, Input, OnInit} from '@angular/core';\n\nimport { Tile } from '../app.component';\nimport {TileList} from '../Services/TilesList';\n\n@Component({\n    selector: `desk`,\n    directives: [Tile],\n    styles: [`\n    .row{\n        display:flex;\n    }\n    `],\n    template: `\n    <ul>\n\n    <li  [ngClass]=\"row\" *ngFor=\"let tileRow of tiles.tiles\" >\n\n           <div *ngFor=\"let tile of tileRow\">\n            <tile [tile_model]=\"tile\"></tile>\n           </div>\n    </li>\n    </ul>`\n})\n\nexport class Desk implements OnInit {\n    @Input() tiles;\n   \n    row: string = \"row\";\n    constructor() {\n        \n       \n    }\n    ngOnInit() {\n    \n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/Components/desk.ts\n **/","import { Component,Input, OnInit,Output,EventEmitter } from '@angular/core';\nimport {TileList } from '../Services/TilesList'\n@Component({\n    selector: 'end',\n    template: `<div>\n        <h1>Winner is {{winner}}</h1>\n     <h2>Start game again </h2>\n<h3>enter number of rows and cols</h3>\n    <form (submit)=\"onSubmit()\">\n        <input type=\"number\" [(ngModel)]=\"row_number\"/>\n    </form>\n</div>\n   `\n})\nexport class GameEndComponent implements OnInit {\n    @Input() winner\n    row_number: number;\n    constructor(\n        public tiles: TileList\n    ) { }\n\n    ngOnInit() { }\n    onSubmit() {\n        this.tiles.startGame(this.row_number);\n\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./app/Components/end-game.ts\n **/"],"sourceRoot":""}